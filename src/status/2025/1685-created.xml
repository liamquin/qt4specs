<item>
   <title>Issue #1685 created</title>
   <pubDate>2025-01-09T09:46:19Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1685</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1685</guid>
   <description>&lt;div&gt;&lt;p&gt;Pipeline Operator&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue is an attempt to find a solution for the discussion in #755, which was originally about defining an expression to bind the context value. It serves as a summary for an upcoming PR.&lt;/p&gt;
&lt;p&gt;We have two operators in the language that can be used for pipelining:
  1. With the simple map operator &lt;code&gt;!&lt;/code&gt;, single items of an input can be bound to the context value.
  2. With the arrow operator &lt;code&gt;=&amp;gt;&lt;/code&gt;, an input can be bound as first argument in a function call.&lt;/p&gt;
&lt;p&gt;The current restrictions are:
  A) There is no way to bind a sequence (a value with 0 or more than 1 items) to the context value.
  B) We can only bind the input to the first function argument.&lt;/p&gt;
&lt;p&gt;In addition, we have introduced the mapping arrow expression &lt;code&gt;=!&amp;gt;&lt;/code&gt; to bind single items of an input to the first function argument.&lt;/p&gt;
&lt;p&gt;We could generalize and simplify the situation by introducing a dedicated and very basic pipeline operator: &lt;code&gt;A -&amp;gt; B&lt;/code&gt; evaluates &lt;code&gt;A&lt;/code&gt; to a value, which is bound to the context value before evaluating &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the operator, restriction A) would be resolved. Restriction B) would be tackled indirectly, as &lt;code&gt;-&amp;gt;&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt; can often be combined. For example, the following examples could be simplified…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: current and simplified syntax :)
$s =&amp;gt; tokenize() =!&amp;gt; fn { `"{.}"` }()
$s -&amp;gt; tokenize(.) ! `"{.}"`

(: current and simplified syntax :)
(1 to 5) =!&amp;gt; xs:double() =!&amp;gt; math:sqrt() =!&amp;gt; fn($a) { $a + 1 }() =&amp;gt; sum()
(1 to 5) ! xs:double(.) ! math:sqrt(.) ! (. + 1) -&amp;gt; sum(.)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and we could drop &lt;code&gt;=!&amp;gt;&lt;/code&gt; in favor of the new operator.&lt;/p&gt;
&lt;p&gt;An equivalent representation for the focus function &lt;code&gt;fn { E }&lt;/code&gt; would be &lt;code&gt;fn($c) { $c -&amp;gt; E }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
