<item>
   <title>Issue #1684 created</title>
   <pubDate>2025-01-08T21:41:35Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1684</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1684</guid>
   <description>&lt;div&gt;&lt;p&gt;[XSLT] Composite merge keys&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The changes in PR #1674 to allow composite sort keys automatically propagate to &lt;code&gt;xsl:merge&lt;/code&gt;, because the semantics of &lt;code&gt;xsl:merge-key&lt;/code&gt; are defined entirely by reference to &lt;code&gt;xsl:sort&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;No immediate problem, except (1) we should acknowledge the fact and point out that composite merge keys are now allowed, and (2) the effect on the current-merge-key() function. This is the sequence-concatenation of the merge keys for multiple merge sources. The spec says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the [current merge key] will be a single atomic item if there is a single merge key, or a sequence of atomic items if there are multiple merge keys.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Actually I think that's already wrong, because it forgets that an individual merge key may be an empty sequence. If that happens then the current-merge-key() function is somewhat useless. I suggest we simply document the fact: if there are multiple merge sources generating multiple merge keys and they are not all singletons, then the sequence concatenation of the merge keys may not be especially useful.&lt;/p&gt;
&lt;p&gt;We could provide a variant current-merge-key-array() that returns an array of sort key values, one for each xsl:merge-key element, each one being a sequence of atomic items.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
