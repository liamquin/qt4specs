<item>
   <title>Issue #1770 created</title>
   <pubDate>2025-02-05T16:07:01Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1770</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1770</guid>
   <description>&lt;div&gt;&lt;p&gt;Union patterns in XSLT&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The original XSLT 1.0 rule for union patterns such as &lt;code&gt;match="A|B"&lt;/code&gt; said that the default priority was calculated as if there were two separate template rules with &lt;code&gt;match="A"&lt;/code&gt; and &lt;code&gt;match="B"&lt;/code&gt;. This became more complicated with the introduction of &lt;code&gt;xsl:next-match&lt;/code&gt; in XSLT 2.0 - what should happen if the item matches both branches? It became more complicated again in XSLT 3.0 with the introduction of &lt;code&gt;on-multiple-match&lt;/code&gt; - is it a multiple match if an item matches both branches? And in 4.0 it's complicated further by the introduction of constructs like &lt;code&gt;match="element(A|B)"&lt;/code&gt; which is deemed equivalent to &lt;code&gt;match=A|B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I would like to break this cycle with a backwards-incompatible change. The default priority of a union pattern should be the numeric maximum of the default priorities of its branches; the treatment as being somewhat-equivalent to two separate template rules should go. We should encourage implementations to issue a compatibility warning if a union pattern appears with no explicit priority, and with multiple branches having different default priority.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
