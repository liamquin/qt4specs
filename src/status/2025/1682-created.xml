<item>
   <title>Issue #1682 created</title>
   <pubDate>2025-01-06T11:05:57Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1682</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1682</guid>
   <description>&lt;div&gt;&lt;p&gt;Type Promotion&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The description of type promotion in Appendix B.1 has become outdated.&lt;/p&gt;
&lt;p&gt;Firstly, the coercion rules no longer invoke type promotion; instead, they use a custom table of "implicit casts". So B.1 is wrong to say that type promotion is invoked by the coercion rules.&lt;/p&gt;
&lt;p&gt;Secondly, for selecting an entry in the operator mapping table, I don't think type promotion comes into play.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The rules for value comparisons do all the necessary type conversions of operands BEFORE invoking a search of the operator mapping table.&lt;/li&gt;
&lt;li&gt;The rules for arithmetic operators don't require any type promotion: for numerics, they invoke a function such as op:numeric-add, and it is the definition of this function (not the selection of the function in the mapping table) that invokes type promotion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The statement in B.1 that "If the result type of an operator is listed as numeric, it means "the first type in the ordered list (xs:integer, xs:decimal, xs:float, xs:double) into which all operands can be converted by [subtype substitution] and [type promotion]" seems wrong in general: for example it doesn't cover &lt;code&gt;integer div integer&lt;/code&gt;. The result type is actually defined by the rules of the selected function, e.g. op:numeric-divide, and not by the "result type" column of the operator mapping table. Perhaps it should say that if the result type is a subtype of numeric as defined by the particular function.&lt;/p&gt;
&lt;p&gt;References to Type Promotion in F&amp;amp;O section 1.6 are also outdated.&lt;/p&gt;
&lt;p&gt;The sum() and avg() functions invoke "numeric promotion" to convert all values in the input to a common type, but the exact rules for doing this aren't exactly clear. For example, the equivalent expression given for sum() doesn't do what the prose says. For example, given sum() applied to a sequence (X as decimal, Y as decimal, Z as float), the prose says the result is float(X) + float(Y) + Z, whereas the equivalent expression gives float(decimal(X + Y)) + Z) which is not necessarily the same thing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
