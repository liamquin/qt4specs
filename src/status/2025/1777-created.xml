<item>
   <title>Issue #1777 created</title>
   <pubDate>2025-02-06T18:35:20Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1777</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1777</guid>
   <description>&lt;div&gt;&lt;p&gt;Shallow copy in XSLT with maps and arrays&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Currently the &lt;code&gt;xsl:copy&lt;/code&gt; instruction, if applied to a map or array, does a deep copy, and ignores the content of the contained sequence constructor.&lt;/p&gt;
&lt;p&gt;I propose that if the contained sequence constructor is non-empty then instead of ignoring it, we should use it to create the content of the new map or array. Specifically, for maps xsl:copy will behave essentially like xsl:map, and for arrays it will behave essentially like xsl:array.&lt;/p&gt;
&lt;p&gt;This is an incompatibility with 3.1, but since a contained sequence constructor is currently totally useless in this situation, it doesn't seem likely to cause any trouble.&lt;/p&gt;
&lt;p&gt;I also propose that rather than using the new built-in &lt;code&gt;on-no-match="shallow-copy-all&lt;/code&gt;, we should extend the semantics of &lt;code&gt;shallow-copy&lt;/code&gt; to cover maps and arrays (as currently defined for &lt;code&gt;shallow-copy-all&lt;/code&gt;). Again, there is an incompatibility, but the current rules are so unhelpful that it's unlikely people are relying on them.&lt;/p&gt;
&lt;p&gt;I also propose that when apply-templates is applied to a map or array, it should be automatically pinned if it is not pinned already. The means that match patterns can be used with a lot more context to match the deep contents of the map or array and override the processing of the built-in templates.&lt;/p&gt;
&lt;p&gt;And I propose that when apply-templates is applied to a map or array and there is no &lt;code&gt;select&lt;/code&gt; attribute, it should "do the right thing" by applying templates to the map or array contents, rather than using the useless default of &lt;code&gt;child::node()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
