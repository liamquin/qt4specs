<item>
   <title>Issue #1672 created</title>
   <pubDate>2025-01-02T20:50:26Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1672</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1672</guid>
   <description>&lt;div&gt;&lt;p&gt;array:values, map:values: Alternatives&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We still have &lt;code&gt;array:values&lt;/code&gt; and &lt;code&gt;map:values&lt;/code&gt; in the spec, even though the names were considered suboptimal: When retrieving values of struct(ure(d item))s, one would expect to get not a flat, but a structured result.&lt;/p&gt;
&lt;p&gt;A while ago, the &lt;code&gt;items&lt;/code&gt; key specifier was introduced to mimic the classical wildcard lookup syntax (making &lt;code&gt;$A?*&lt;/code&gt; and &lt;code&gt;$A?items::*&lt;/code&gt; equivalent), and I suggest renaming our functions to &lt;code&gt;array:items&lt;/code&gt; and &lt;code&gt;map:items&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;  $map?*
≍ map:items($map)

  $array?*
≍ array:items($array)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plan B could be to extend the second argument of &lt;code&gt;map:get&lt;/code&gt; (and &lt;code&gt;array:get&lt;/code&gt;) to also accept predicate functions…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:get(
  $map  as map(*),	
  $key  as (xs:anyAtomicType|fn(xs:anyAtomicType) as xs:boolean?)
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…which would allow us to write:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;  $map?a
≍ $map =&amp;gt; map:get('a')
≍ $map =&amp;gt; map:get(fn { . = 'a' })

  $map?(1 to 5)
≍ $map =&amp;gt; map:get(fn { . = 1 to 5 })

  $map?*
≍ $map =&amp;gt; map:get(true#0)

(: and things like :)
$map =&amp;gt; map:get(fn { . mod 2 = 1 })
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
