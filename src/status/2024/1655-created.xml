<item>
   <title>Issue #1655 created</title>
   <pubDate>2024-12-11T22:46:27Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1655</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1655</guid>
   <description>&lt;div&gt;&lt;p&gt;JSON maps&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Now that we are discussing different types of maps, there could also be JSON maps. Then each map would have a property &lt;code&gt;json&lt;/code&gt;, that can be false or true. If it is false, it is an ordinary map like now. If it is true, it is a "JSON map".&lt;/p&gt;
&lt;p&gt;A JSON map can only have string keys, and all map functions would enforce that constraint by casting the key to string.&lt;/p&gt;
&lt;p&gt;Parse-json and json-doc would return a JSON map. As would the bare brace &lt;code&gt;{}&lt;/code&gt; constructor for compatibility with Javascript.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $json := parse-json('{"1": 234}')
return map:put($json, 1, 456)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would return a JSON map &lt;code&gt;{"1": 456}&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $json := parse-json('{"1": 234}')
return map:contains($json, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would return true.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
