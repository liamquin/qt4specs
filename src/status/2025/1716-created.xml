<item>
   <title>Issue #1716 created</title>
   <pubDate>2025-01-20T21:13:15Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1716</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1716</guid>
   <description>&lt;div&gt;&lt;p&gt;Variable lookahead needed for `ArrowTarget`&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The current grammar definition allows any &lt;code&gt;QName&lt;/code&gt; (via &lt;code&gt;EQName&lt;/code&gt;) as an &lt;code&gt;ArrowStaticFunction&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowTarget
         ::= ArrowStaticFunction ArgumentList
           | ArrowDynamicFunction PositionalArgumentList
ArrowStaticFunction
         ::= EQName
ArrowDynamicFunction
         ::= VarRef
           | InlineFunctionExpr
           | ParenthesizedExpr 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This complicates the distinction of the static and dynamic variants of &lt;code&gt;ArrowTarget&lt;/code&gt;, as it cannot be done with a fixed number of lookahead tokens. E.g. in an expression starting like this&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;A =&amp;gt; fn ( $A, $B, $C, (: ... :) $Z ) { } ( 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the distinction cannot be made before the left brace is seen. While constructing an LR parser, there is a shift-reduce conflict between shifting &lt;code&gt;fn&lt;/code&gt; as a keyword of an &lt;code&gt;InlineFunctionExpr&lt;/code&gt;, or reducing &lt;code&gt;fn&lt;/code&gt; to the &lt;code&gt;QName&lt;/code&gt; of &lt;code&gt;EQName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This can easily be fixed by adding &lt;code&gt;xgc: reserved-function-names&lt;/code&gt; to &lt;code&gt;ArrowStaticFunction&lt;/code&gt;, which would also be consistent with other function calls in disallowing reserved function names:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowStaticFunction
         ::= EQName
                          /* xgc: reserved-function-names */		 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But could not &lt;code&gt;ArrowTarget&lt;/code&gt; also be written like the following?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ArrowTarget
         ::= FunctionCall
           | DynamicFunctionCall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, the &lt;code&gt;xgc: reserved-function-names&lt;/code&gt; constraint would be inherited from &lt;code&gt;FunctionCall&lt;/code&gt;. It eliminates &lt;code&gt;ArrowStaticFunction&lt;/code&gt; and &lt;code&gt;ArrowDynamicFunction&lt;/code&gt; and at the same time lifts some restrictions imposed by the current &lt;code&gt;ArrowTarget&lt;/code&gt;. It does not cause any LALR(2) conflicts.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
