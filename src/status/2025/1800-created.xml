<item>
   <title>Issue #1800 created</title>
   <pubDate>2025-02-14T20:17:03Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1800</link>
   <guid>https://qt4cg.org/@qt4cg/2025/#created-1800</guid>
   <description>&lt;div&gt;&lt;p&gt;The `=?&amp;gt;` lookup arrow expression operator is weird, difficult to use, difficult to understand, difficult to read and unnatural&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The XPath 4.0 language now includes a way for a function defined as a member of a map to easily access other members (siblings) that belong to the same map instance. Special syntax, the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#lookup-arrow-expression"&gt;&lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt; operator&lt;/strong&gt;&lt;/a&gt;, was introduced to call such a function. As a whole this is a huge step forward providing the user with a new, powerful mechanism to conveniently express relationships and calculations over several member-values of a map instance.&lt;/p&gt;
&lt;p&gt;I am raising this issue with the goal of further improving and simplifying for the user the way to define and call a member function of a map/record, giving it a convenient way to access the values of other members of the instance of the map, on which the call has been issued.&lt;/p&gt;
&lt;p&gt;In my work, I have been trying to define a number of functions that must belong to a map/record and that should be able to access other members of the same map/record to which these functions belong.&lt;/p&gt;
&lt;p&gt;The experience was far from satisfying and here I describe the main problems I encountered when trying to use the &lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/strong&gt; operator, and some obvious suggestions how we can further simplify the syntax for calling any member function of a map or record.&lt;/p&gt;
&lt;h1&gt;1. Problems trying to use the &lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/strong&gt; operator&lt;/h1&gt;
&lt;p&gt;Here are the main problems I ran into.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem1&lt;/strong&gt;. The &lt;strong&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/strong&gt; operator was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;weird-looking;&lt;/li&gt;
&lt;li&gt;difficult to use;&lt;/li&gt;
&lt;li&gt;difficult to understand;&lt;/li&gt;
&lt;li&gt;difficult to read;&lt;/li&gt;
&lt;li&gt;feeling unnatural.
It would be much better if we didn't have to use any special operator at all in order to call a member function "&lt;strong&gt;&lt;em&gt;&lt;code&gt;myFunction&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;" of a map &lt;strong&gt;&lt;em&gt;&lt;code&gt;$m&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; by simply:
&lt;strong&gt;&lt;em&gt;&lt;code&gt;$m?myFunction(&amp;lt;tuple of any arguments defined in the signature of the function&amp;gt;)&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Problem2&lt;/strong&gt;. There is no example, in the sections that describe the record type (&lt;strong&gt;&lt;em&gt;&lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#lookup-arrow-expression"&gt;3.2.8.3&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;), showing a record member-function that accesses the values of other members of the same instance of the record.
&lt;strong&gt;Thus, the new feature is effectively hidden&lt;/strong&gt; for people who want to work with records.
We need such an example for a record, so that we don't forget that any record is also a map and possesses all functionality a map has to offer. And a statement to this effect must be added to the description of records.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 3&lt;/strong&gt;.  This syntax is overcomplicated and difficult to use and remember, resulting in unnecessarily long and complex expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $rectangle := {
  "width": 20,
  "height": 12,
  "area": fn($this) { $this?width * $this?height }
} 
return $rectangle =?&amp;gt; area()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It would be significantly better to use a much simplified syntax such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $rectangle := {
  "width": 20,
  "height": 12,
  "area": fn() { ?width * ?height }
} 
return $rectangle ? area()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recognizing that &lt;strong&gt;&lt;em&gt;&lt;code&gt;?name&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is already used since XPath 3.1 as &lt;strong&gt;&lt;a href="https://www.w3.org/TR/2017/REC-xpath-31-20170321/#id-unary-lookup"&gt;Unary Lookup Operator&lt;/a&gt;&lt;/strong&gt;, and to avoid the unlikely case of collision, when a member function accesses other members of the map-owner-instance that happen to have identically the same names as expected constituents of the current context item (upon which the function is applied), we can introduce a special character to denote the current map-owner-instance, thus the above example could look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $rectangle := {
  "width": 20,
  "height": 12,
  "area": fn() { ^width * ^height }
} 
return $rectangle ? area()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Solutions&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Solution for Problem 1&lt;/strong&gt; above (weirdness of the &lt;strong&gt;&lt;em&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; operator:&lt;br/&gt;
&lt;em&gt;Do not introduce any special operator&lt;/em&gt;. Just use &lt;code&gt;?&lt;/code&gt; to invoke the member-function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution for Problem 2&lt;/strong&gt; above (lack of example of a record having a member-function that accesses other members of the same map-owner-instance).
Obviously, &lt;em&gt;provide such an example&lt;/em&gt;. Also &lt;em&gt;reiterate there that all features and functionality of a map continue to be available for records&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution for Problem 3&lt;/strong&gt; above (overcomplicated syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get rid of the &lt;strong&gt;&lt;em&gt;&lt;code&gt;=?&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; operator. Use &lt;strong&gt;&lt;code&gt;?&lt;/code&gt;&lt;/strong&gt; for all references to member-functions.&lt;/li&gt;
&lt;li&gt;Don't use any special variable like &lt;strong&gt;&lt;em&gt;&lt;code&gt;$this&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. For example, the current example in the documentation:
&lt;code&gt;"area": fn($this) { $this?width * $this?height }&lt;/code&gt;
should instead be:
&lt;code&gt;"area": fn() { ^width * ^height }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;use the &lt;strong&gt;&lt;code&gt;^&lt;/code&gt;&lt;/strong&gt; character to denote &lt;em&gt;owner-map-instance&lt;/em&gt; membership. Thus &lt;strong&gt;&lt;em&gt;&lt;code&gt;^width&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; means: "&lt;em&gt;The member named &lt;strong&gt;"width"&lt;/strong&gt; of the map instance upon which the current function was invoked&lt;/em&gt;"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I will issue a PR with the solutions, provided there are not any substantial comments hilighting problems with this proposal.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
